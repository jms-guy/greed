// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transactions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    id, 
    created_at, 
    updated_at, 
    amount, 
    category, 
    description, 
    transaction_date, 
    transaction_type,
    currency_code,
    account_id)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
RETURNING id, created_at, updated_at, amount, category, description, transaction_date, transaction_type, currency_code, account_id
`

type CreateTransactionParams struct {
	ID              uuid.UUID
	Amount          string
	Category        string
	Description     sql.NullString
	TransactionDate time.Time
	TransactionType string
	CurrencyCode    string
	AccountID       uuid.UUID
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.Amount,
		arg.Category,
		arg.Description,
		arg.TransactionDate,
		arg.TransactionType,
		arg.CurrencyCode,
		arg.AccountID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Amount,
		&i.Category,
		&i.Description,
		&i.TransactionDate,
		&i.TransactionType,
		&i.CurrencyCode,
		&i.AccountID,
	)
	return i, err
}

const updateTransactionCategory = `-- name: UpdateTransactionCategory :exec
UPDATE transactions
SET category = $1, updated_at = now()
WHERE id = $2
`

type UpdateTransactionCategoryParams struct {
	Category string
	ID       uuid.UUID
}

func (q *Queries) UpdateTransactionCategory(ctx context.Context, arg UpdateTransactionCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionCategory, arg.Category, arg.ID)
	return err
}

const updateTransactionDescription = `-- name: UpdateTransactionDescription :exec
UPDATE transactions
SET description = $1, updated_at = now()
WHERE id = $2
`

type UpdateTransactionDescriptionParams struct {
	Description sql.NullString
	ID          uuid.UUID
}

func (q *Queries) UpdateTransactionDescription(ctx context.Context, arg UpdateTransactionDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionDescription, arg.Description, arg.ID)
	return err
}
