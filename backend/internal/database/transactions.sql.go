// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transactions.sql

package database

import (
	"context"
	"database/sql"
)

const clearTransactionsTable = `-- name: ClearTransactionsTable :exec
DELETE FROM transactions
`

func (q *Queries) ClearTransactionsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearTransactionsTable)
	return err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    id, 
    account_id,
    amount,
    iso_currency_code,
    date,
    merchant_name,
    payment_channel,
    personal_finance_category,
    created_at,
    updated_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    NOW(),
    NOW()
)
RETURNING id, account_id, amount, iso_currency_code, date, merchant_name, payment_channel, personal_finance_category, created_at, updated_at
`

type CreateTransactionParams struct {
	ID                      string
	AccountID               string
	Amount                  string
	IsoCurrencyCode         sql.NullString
	Date                    sql.NullTime
	MerchantName            sql.NullString
	PaymentChannel          string
	PersonalFinanceCategory string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.AccountID,
		arg.Amount,
		arg.IsoCurrencyCode,
		arg.Date,
		arg.MerchantName,
		arg.PaymentChannel,
		arg.PersonalFinanceCategory,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.IsoCurrencyCode,
		&i.Date,
		&i.MerchantName,
		&i.PaymentChannel,
		&i.PersonalFinanceCategory,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id = $1 AND account_id = $2
`

type DeleteTransactionParams struct {
	ID        string
	AccountID string
}

func (q *Queries) DeleteTransaction(ctx context.Context, arg DeleteTransactionParams) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, arg.ID, arg.AccountID)
	return err
}

const deleteTransactionsForAccount = `-- name: DeleteTransactionsForAccount :exec
DELETE FROM transactions
WHERE account_id = $1
`

func (q *Queries) DeleteTransactionsForAccount(ctx context.Context, accountID string) error {
	_, err := q.db.ExecContext(ctx, deleteTransactionsForAccount, accountID)
	return err
}

const getTransactions = `-- name: GetTransactions :many
SELECT id, account_id, amount, iso_currency_code, date, merchant_name, payment_channel, personal_finance_category, created_at, updated_at FROM transactions
WHERE account_id = $1
`

func (q *Queries) GetTransactions(ctx context.Context, accountID string) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactions, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.IsoCurrencyCode,
			&i.Date,
			&i.MerchantName,
			&i.PaymentChannel,
			&i.PersonalFinanceCategory,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByCategory = `-- name: GetTransactionsByCategory :many
SELECT id, account_id, amount, iso_currency_code, date, merchant_name, payment_channel, personal_finance_category, created_at, updated_at FROM transactions
WHERE account_id = $1 AND personal_finance_category = $2
`

type GetTransactionsByCategoryParams struct {
	AccountID               string
	PersonalFinanceCategory string
}

func (q *Queries) GetTransactionsByCategory(ctx context.Context, arg GetTransactionsByCategoryParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByCategory, arg.AccountID, arg.PersonalFinanceCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.IsoCurrencyCode,
			&i.Date,
			&i.MerchantName,
			&i.PaymentChannel,
			&i.PersonalFinanceCategory,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByChannel = `-- name: GetTransactionsByChannel :many
SELECT id, account_id, amount, iso_currency_code, date, merchant_name, payment_channel, personal_finance_category, created_at, updated_at FROM transactions
WHERE account_id = $1 AND payment_channel = $2
`

type GetTransactionsByChannelParams struct {
	AccountID      string
	PaymentChannel string
}

func (q *Queries) GetTransactionsByChannel(ctx context.Context, arg GetTransactionsByChannelParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByChannel, arg.AccountID, arg.PaymentChannel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.IsoCurrencyCode,
			&i.Date,
			&i.MerchantName,
			&i.PaymentChannel,
			&i.PersonalFinanceCategory,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByMerchant = `-- name: GetTransactionsByMerchant :many
SELECT id, account_id, amount, iso_currency_code, date, merchant_name, payment_channel, personal_finance_category, created_at, updated_at FROM transactions
WHERE account_id = $1 AND merchant_name = $2
`

type GetTransactionsByMerchantParams struct {
	AccountID    string
	MerchantName sql.NullString
}

func (q *Queries) GetTransactionsByMerchant(ctx context.Context, arg GetTransactionsByMerchantParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByMerchant, arg.AccountID, arg.MerchantName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.IsoCurrencyCode,
			&i.Date,
			&i.MerchantName,
			&i.PaymentChannel,
			&i.PersonalFinanceCategory,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsforDate = `-- name: GetTransactionsforDate :many
SELECT id, account_id, amount, iso_currency_code, date, merchant_name, payment_channel, personal_finance_category, created_at, updated_at FROM transactions
WHERE account_id = $1 AND date = $2
`

type GetTransactionsforDateParams struct {
	AccountID string
	Date      sql.NullTime
}

func (q *Queries) GetTransactionsforDate(ctx context.Context, arg GetTransactionsforDateParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsforDate, arg.AccountID, arg.Date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.IsoCurrencyCode,
			&i.Date,
			&i.MerchantName,
			&i.PaymentChannel,
			&i.PersonalFinanceCategory,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
