// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
INSERT INTO refresh_tokens (
    id,
    hashed_token,
    delegation_id,
    created_at,
    expires_at,
    is_used,
    used_at)
VALUES (
    $1,
    $2,
    $3,
    NOW(),
    $4,
    FALSE,
    NULL
)
RETURNING id, hashed_token, delegation_id, created_at, expires_at, is_used, used_at
`

type CreateTokenParams struct {
	ID           uuid.UUID
	HashedToken  string
	DelegationID uuid.UUID
	ExpiresAt    time.Time
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createToken,
		arg.ID,
		arg.HashedToken,
		arg.DelegationID,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.HashedToken,
		&i.DelegationID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsUsed,
		&i.UsedAt,
	)
	return i, err
}

const expireToken = `-- name: ExpireToken :exec
UPDATE refresh_tokens
SET is_used = TRUE, used_at = NOW()
WHERE hashed_token = $1
`

func (q *Queries) ExpireToken(ctx context.Context, hashedToken string) error {
	_, err := q.db.ExecContext(ctx, expireToken, hashedToken)
	return err
}
