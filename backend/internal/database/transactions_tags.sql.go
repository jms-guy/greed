// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transactions_tags.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTransactionToTagRecord = `-- name: CreateTransactionToTagRecord :exec
INSERT INTO transactions_to_tags (
    transaction_id,
    tag_id
)
VALUES (
    $1,
    $2
)
`

type CreateTransactionToTagRecordParams struct {
	TransactionID string
	TagID         uuid.UUID
}

func (q *Queries) CreateTransactionToTagRecord(ctx context.Context, arg CreateTransactionToTagRecordParams) error {
	_, err := q.db.ExecContext(ctx, createTransactionToTagRecord, arg.TransactionID, arg.TagID)
	return err
}

const getTagsForTransaction = `-- name: GetTagsForTransaction :many
SELECT transaction_id, tag_id FROM transactions_to_tags
WHERE transaction_id = $1
`

func (q *Queries) GetTagsForTransaction(ctx context.Context, transactionID string) ([]TransactionsToTag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsForTransaction, transactionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionsToTag
	for rows.Next() {
		var i TransactionsToTag
		if err := rows.Scan(&i.TransactionID, &i.TagID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsWithTag = `-- name: GetTransactionsWithTag :many
SELECT transaction_id, tag_id FROM transactions_to_tags
WHERE tag_id = $1
`

func (q *Queries) GetTransactionsWithTag(ctx context.Context, tagID uuid.UUID) ([]TransactionsToTag, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsWithTag, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionsToTag
	for rows.Next() {
		var i TransactionsToTag
		if err := rows.Scan(&i.TransactionID, &i.TagID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
