// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: verification_records.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createVerificationRecord = `-- name: CreateVerificationRecord :one
INSERT INTO verification_records (user_id, verification_code, expiry_time)
VALUES (
    $1,
    $2,
    $3
)
RETURNING user_id, verification_code, expiry_time
`

type CreateVerificationRecordParams struct {
	UserID           uuid.UUID
	VerificationCode string
	ExpiryTime       time.Time
}

func (q *Queries) CreateVerificationRecord(ctx context.Context, arg CreateVerificationRecordParams) (VerificationRecord, error) {
	row := q.db.QueryRowContext(ctx, createVerificationRecord, arg.UserID, arg.VerificationCode, arg.ExpiryTime)
	var i VerificationRecord
	err := row.Scan(&i.UserID, &i.VerificationCode, &i.ExpiryTime)
	return i, err
}

const deleteVerificationRecord = `-- name: DeleteVerificationRecord :exec
DELETE FROM verification_records
WHERE verification_code = $1
`

func (q *Queries) DeleteVerificationRecord(ctx context.Context, verificationCode string) error {
	_, err := q.db.ExecContext(ctx, deleteVerificationRecord, verificationCode)
	return err
}

const getVerificationRecord = `-- name: GetVerificationRecord :one
SELECT user_id, verification_code, expiry_time FROM verification_records
WHERE verification_code = $1
`

func (q *Queries) GetVerificationRecord(ctx context.Context, verificationCode string) (VerificationRecord, error) {
	row := q.db.QueryRowContext(ctx, getVerificationRecord, verificationCode)
	var i VerificationRecord
	err := row.Scan(&i.UserID, &i.VerificationCode, &i.ExpiryTime)
	return i, err
}
