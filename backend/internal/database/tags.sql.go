// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tags.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTag = `-- name: CreateTag :one
INSERT INTO transaction_tags (
    id,
    name,
    user_id,
    created_at
)
VALUES (
    $1,
    $2,
    $3,
    NOW()
)
RETURNING id, name, user_id, created_at
`

type CreateTagParams struct {
	ID     uuid.UUID
	Name   string
	UserID uuid.UUID
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (TransactionTag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.ID, arg.Name, arg.UserID)
	var i TransactionTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllTagsForUser = `-- name: DeleteAllTagsForUser :exec
DELETE FROM transaction_tags
WHERE user_id = $1
`

func (q *Queries) DeleteAllTagsForUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAllTagsForUser, userID)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM transaction_tags
WHERE name = $1
AND user_id = $2
`

type DeleteTagParams struct {
	Name   string
	UserID uuid.UUID
}

func (q *Queries) DeleteTag(ctx context.Context, arg DeleteTagParams) error {
	_, err := q.db.ExecContext(ctx, deleteTag, arg.Name, arg.UserID)
	return err
}

const getAllTagsForUser = `-- name: GetAllTagsForUser :many
SELECT id, name, user_id, created_at FROM transaction_tags
WHERE user_id = $1
`

func (q *Queries) GetAllTagsForUser(ctx context.Context, userID uuid.UUID) ([]TransactionTag, error) {
	rows, err := q.db.QueryContext(ctx, getAllTagsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionTag
	for rows.Next() {
		var i TransactionTag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTag = `-- name: GetTag :one
SELECT id, name, user_id, created_at FROM transaction_tags
WHERE name = $1
AND user_id = $2
`

type GetTagParams struct {
	Name   string
	UserID uuid.UUID
}

func (q *Queries) GetTag(ctx context.Context, arg GetTagParams) (TransactionTag, error) {
	row := q.db.QueryRowContext(ctx, getTag, arg.Name, arg.UserID)
	var i TransactionTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
