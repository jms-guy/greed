// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts(id, created_at, updated_at, balance, goal, currency, user_id)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, balance, goal, currency, user_id
`

type CreateAccountParams struct {
	ID       uuid.UUID
	Balance  sql.NullString
	Goal     sql.NullString
	Currency string
	UserID   uuid.UUID
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.Balance,
		arg.Goal,
		arg.Currency,
		arg.UserID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Balance,
		&i.Goal,
		&i.Currency,
		&i.UserID,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
AND user_id = $2
`

type DeleteAccountParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, arg.ID, arg.UserID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, created_at, updated_at, balance, goal, currency, user_id FROM accounts
WHERE id = $1
AND user_id = $2
`

type GetAccountParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetAccount(ctx context.Context, arg GetAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, arg.ID, arg.UserID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Balance,
		&i.Goal,
		&i.Currency,
		&i.UserID,
	)
	return i, err
}

const getAllAccountsForUser = `-- name: GetAllAccountsForUser :many
SELECT id, created_at, updated_at, balance, goal, currency, user_id FROM accounts
WHERE user_id = $1
`

func (q *Queries) GetAllAccountsForUser(ctx context.Context, userID uuid.UUID) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccountsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Balance,
			&i.Goal,
			&i.Currency,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetAccounts = `-- name: ResetAccounts :exec
DELETE FROM accounts
`

func (q *Queries) ResetAccounts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetAccounts)
	return err
}

const updateBalance = `-- name: UpdateBalance :one
UPDATE accounts
SET balance = $1, updated_at = now()
WHERE id = $2
RETURNING id, created_at, updated_at, balance, goal, currency, user_id
`

type UpdateBalanceParams struct {
	Balance sql.NullString
	ID      uuid.UUID
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateBalance, arg.Balance, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Balance,
		&i.Goal,
		&i.Currency,
		&i.UserID,
	)
	return i, err
}

const updateCurrency = `-- name: UpdateCurrency :one
UPDATE accounts
SET currency = $1, updated_at = now()
WHERE id = $2
RETURNING id, created_at, updated_at, balance, goal, currency, user_id
`

type UpdateCurrencyParams struct {
	Currency string
	ID       uuid.UUID
}

func (q *Queries) UpdateCurrency(ctx context.Context, arg UpdateCurrencyParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateCurrency, arg.Currency, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Balance,
		&i.Goal,
		&i.Currency,
		&i.UserID,
	)
	return i, err
}

const updateGoal = `-- name: UpdateGoal :one
UPDATE accounts
SET goal = $1, updated_at = now()
WHERE id = $2
RETURNING id, created_at, updated_at, balance, goal, currency, user_id
`

type UpdateGoalParams struct {
	Goal sql.NullString
	ID   uuid.UUID
}

func (q *Queries) UpdateGoal(ctx context.Context, arg UpdateGoalParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateGoal, arg.Goal, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Balance,
		&i.Goal,
		&i.Currency,
		&i.UserID,
	)
	return i, err
}
