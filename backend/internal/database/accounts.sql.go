// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts(id, created_at, updated_at, name, type, mask, official_name, plaid_account_id, item_id)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, created_at, updated_at, name, type, mask, official_name, plaid_account_id, item_id
`

type CreateAccountParams struct {
	ID             uuid.UUID
	Name           sql.NullString
	Type           sql.NullString
	Mask           sql.NullString
	OfficialName   sql.NullString
	PlaidAccountID string
	ItemID         uuid.NullUUID
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Mask,
		arg.OfficialName,
		arg.PlaidAccountID,
		arg.ItemID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.Mask,
		&i.OfficialName,
		&i.PlaidAccountID,
		&i.ItemID,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, created_at, updated_at, name, type, mask, official_name, plaid_account_id, item_id FROM accounts
WHERE name = $1
`

func (q *Queries) GetAccount(ctx context.Context, name sql.NullString) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, name)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.Mask,
		&i.OfficialName,
		&i.PlaidAccountID,
		&i.ItemID,
	)
	return i, err
}

const getAllAccountsForUser = `-- name: GetAllAccountsForUser :many
SELECT id, created_at, updated_at, name, type, mask, official_name, plaid_account_id, item_id FROM accounts
WHERE item_id = $1
`

func (q *Queries) GetAllAccountsForUser(ctx context.Context, itemID uuid.NullUUID) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccountsForUser, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Type,
			&i.Mask,
			&i.OfficialName,
			&i.PlaidAccountID,
			&i.ItemID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetAccounts = `-- name: ResetAccounts :exec
DELETE FROM accounts
`

func (q *Queries) ResetAccounts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetAccounts)
	return err
}
