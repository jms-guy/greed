// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts(id, created_at, updated_at, name, user_id)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3
)
RETURNING id, created_at, updated_at, name, user_id
`

type CreateAccountParams struct {
	ID     uuid.UUID
	Name   string
	UserID uuid.UUID
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.ID, arg.Name, arg.UserID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
AND user_id = $2
`

type DeleteAccountParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, arg.ID, arg.UserID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, created_at, updated_at, name, user_id FROM accounts
WHERE id = $1
AND user_id = $2
`

type GetAccountParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetAccount(ctx context.Context, arg GetAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, arg.ID, arg.UserID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const getAllAccountsForUser = `-- name: GetAllAccountsForUser :many
SELECT id, created_at, updated_at, name, user_id FROM accounts
WHERE user_id = $1
`

func (q *Queries) GetAllAccountsForUser(ctx context.Context, userID uuid.UUID) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccountsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetAccounts = `-- name: ResetAccounts :exec
DELETE FROM accounts
`

func (q *Queries) ResetAccounts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetAccounts)
	return err
}
