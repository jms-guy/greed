// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts(
    id,
    created_at, 
    updated_at, 
    name, 
    type, 
    subtype, 
    mask, 
    official_name,
    available_balance,
    current_balance,
    iso_currency_code, 
    item_id)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
)
RETURNING id, created_at, updated_at, name, type, subtype, mask, official_name, available_balance, current_balance, iso_currency_code, item_id, user_id
`

type CreateAccountParams struct {
	ID               string
	Name             string
	Type             string
	Subtype          sql.NullString
	Mask             sql.NullString
	OfficialName     sql.NullString
	AvailableBalance sql.NullString
	CurrentBalance   sql.NullString
	IsoCurrencyCode  sql.NullString
	ItemID           string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Subtype,
		arg.Mask,
		arg.OfficialName,
		arg.AvailableBalance,
		arg.CurrentBalance,
		arg.IsoCurrencyCode,
		arg.ItemID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.Subtype,
		&i.Mask,
		&i.OfficialName,
		&i.AvailableBalance,
		&i.CurrentBalance,
		&i.IsoCurrencyCode,
		&i.ItemID,
		&i.UserID,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1 AND user_id = $2
`

type DeleteAccountParams struct {
	ID     string
	UserID uuid.UUID
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, arg.ID, arg.UserID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, created_at, updated_at, name, type, subtype, mask, official_name, available_balance, current_balance, iso_currency_code, item_id, user_id FROM accounts
WHERE name = $1
`

func (q *Queries) GetAccount(ctx context.Context, name string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, name)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.Subtype,
		&i.Mask,
		&i.OfficialName,
		&i.AvailableBalance,
		&i.CurrentBalance,
		&i.IsoCurrencyCode,
		&i.ItemID,
		&i.UserID,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, created_at, updated_at, name, type, subtype, mask, official_name, available_balance, current_balance, iso_currency_code, item_id, user_id FROM accounts
WHERE id = $1 AND user_id = $2
`

type GetAccountByIdParams struct {
	ID     string
	UserID uuid.UUID
}

func (q *Queries) GetAccountById(ctx context.Context, arg GetAccountByIdParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, arg.ID, arg.UserID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.Subtype,
		&i.Mask,
		&i.OfficialName,
		&i.AvailableBalance,
		&i.CurrentBalance,
		&i.IsoCurrencyCode,
		&i.ItemID,
		&i.UserID,
	)
	return i, err
}

const getAccountsForItem = `-- name: GetAccountsForItem :many
SELECT id, created_at, updated_at, name, type, subtype, mask, official_name, available_balance, current_balance, iso_currency_code, item_id, user_id FROM accounts
WHERE item_id = $1
`

func (q *Queries) GetAccountsForItem(ctx context.Context, itemID string) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccountsForItem, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Type,
			&i.Subtype,
			&i.Mask,
			&i.OfficialName,
			&i.AvailableBalance,
			&i.CurrentBalance,
			&i.IsoCurrencyCode,
			&i.ItemID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAccountsForUser = `-- name: GetAllAccountsForUser :many
SELECT id, created_at, updated_at, name, type, subtype, mask, official_name, available_balance, current_balance, iso_currency_code, item_id, user_id FROM accounts
WHERE user_id = $1
`

func (q *Queries) GetAllAccountsForUser(ctx context.Context, userID uuid.UUID) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccountsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Type,
			&i.Subtype,
			&i.Mask,
			&i.OfficialName,
			&i.AvailableBalance,
			&i.CurrentBalance,
			&i.IsoCurrencyCode,
			&i.ItemID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetAccounts = `-- name: ResetAccounts :exec
DELETE FROM accounts
`

func (q *Queries) ResetAccounts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetAccounts)
	return err
}

const updateBalances = `-- name: UpdateBalances :one
UPDATE accounts
SET available_balance = $1, current_balance = $2, updated_at = NOW()
WHERE id = $3 AND item_id = $4
RETURNING id, created_at, updated_at, name, type, subtype, mask, official_name, available_balance, current_balance, iso_currency_code, item_id, user_id
`

type UpdateBalancesParams struct {
	AvailableBalance sql.NullString
	CurrentBalance   sql.NullString
	ID               string
	ItemID           string
}

func (q *Queries) UpdateBalances(ctx context.Context, arg UpdateBalancesParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateBalances,
		arg.AvailableBalance,
		arg.CurrentBalance,
		arg.ID,
		arg.ItemID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.Subtype,
		&i.Mask,
		&i.OfficialName,
		&i.AvailableBalance,
		&i.CurrentBalance,
		&i.IsoCurrencyCode,
		&i.ItemID,
		&i.UserID,
	)
	return i, err
}
