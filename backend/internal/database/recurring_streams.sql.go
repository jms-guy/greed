// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: recurring_streams.sql

package database

import (
	"context"
	"database/sql"
)

const createStream = `-- name: CreateStream :exec
INSERT INTO recurring_streams(
    id,
    account_id,
    description,
    merchant_name,
    frequency,
    is_active,
    predicted_next_date,
    stream_type,
    created_at
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    NOW()
)
`

type CreateStreamParams struct {
	ID                string
	AccountID         string
	Description       string
	MerchantName      sql.NullString
	Frequency         string
	IsActive          bool
	PredictedNextDate sql.NullString
	StreamType        string
}

func (q *Queries) CreateStream(ctx context.Context, arg CreateStreamParams) error {
	_, err := q.db.ExecContext(ctx, createStream,
		arg.ID,
		arg.AccountID,
		arg.Description,
		arg.MerchantName,
		arg.Frequency,
		arg.IsActive,
		arg.PredictedNextDate,
		arg.StreamType,
	)
	return err
}

const getStreamsForAcc = `-- name: GetStreamsForAcc :many
SELECT id, account_id, description, merchant_name, frequency, is_active, predicted_next_date, stream_type, created_at FROM recurring_streams
WHERE account_id = $1
`

func (q *Queries) GetStreamsForAcc(ctx context.Context, accountID string) ([]RecurringStream, error) {
	rows, err := q.db.QueryContext(ctx, getStreamsForAcc, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecurringStream
	for rows.Next() {
		var i RecurringStream
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Description,
			&i.MerchantName,
			&i.Frequency,
			&i.IsActive,
			&i.PredictedNextDate,
			&i.StreamType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
