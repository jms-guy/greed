// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transactions_to_streams.sql

package database

import (
	"context"
)

const createTransactionToStreamRecord = `-- name: CreateTransactionToStreamRecord :exec
INSERT INTO transactions_to_streams (
    transaction_id,
    stream_id
)
VALUES (
    $1,
    $2
)
`

type CreateTransactionToStreamRecordParams struct {
	TransactionID string
	StreamID      string
}

func (q *Queries) CreateTransactionToStreamRecord(ctx context.Context, arg CreateTransactionToStreamRecordParams) error {
	_, err := q.db.ExecContext(ctx, createTransactionToStreamRecord, arg.TransactionID, arg.StreamID)
	return err
}

const getTransactionsToStreamConnections = `-- name: GetTransactionsToStreamConnections :many
SELECT transaction_id, stream_id FROM transactions_to_streams
WHERE stream_id = $1
`

func (q *Queries) GetTransactionsToStreamConnections(ctx context.Context, streamID string) ([]TransactionsToStream, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsToStreamConnections, streamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionsToStream
	for rows.Next() {
		var i TransactionsToStream
		if err := rows.Scan(&i.TransactionID, &i.StreamID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
