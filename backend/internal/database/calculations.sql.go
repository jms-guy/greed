// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: calculations.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getExpensesForMonth = `-- name: GetExpensesForMonth :one
SELECT CAST(SUM(amount) as NUMERIC(16,2)) monthly_expenses
FROM transactions
WHERE
    transaction_type = 'debit'  
    AND transaction_date >= make_date($1, $2, 1)
    AND transaction_date < make_date($1, $2, 1) + interval '1 month'
    AND account_id = $3
`

type GetExpensesForMonthParams struct {
	Year      int32
	Month     int32
	AccountID uuid.UUID
}

func (q *Queries) GetExpensesForMonth(ctx context.Context, arg GetExpensesForMonthParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getExpensesForMonth, arg.Year, arg.Month, arg.AccountID)
	var monthly_expenses string
	err := row.Scan(&monthly_expenses)
	return monthly_expenses, err
}

const getIncomeForMonth = `-- name: GetIncomeForMonth :one
SELECT CAST(SUM(amount) as NUMERIC(16,2)) monthly_income
FROM transactions
WHERE
    transaction_type = 'credit'
    AND transaction_date >= make_date($1, $2, 1)
    AND transaction_date < make_date($1, $2, 1) + interval '1 month'
    AND account_id = $3
`

type GetIncomeForMonthParams struct {
	Year      int32
	Month     int32
	AccountID uuid.UUID
}

func (q *Queries) GetIncomeForMonth(ctx context.Context, arg GetIncomeForMonthParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getIncomeForMonth, arg.Year, arg.Month, arg.AccountID)
	var monthly_income string
	err := row.Scan(&monthly_income)
	return monthly_income, err
}

const getNetIncomeForMonth = `-- name: GetNetIncomeForMonth :one
SELECT CAST(SUM(amount) as NUMERIC(16,2)) net_income
FROM transactions
WHERE
    transaction_type != 'transfer'
    AND transaction_date >= make_date($1, $2, 1)
    AND transaction_date < make_date($1, $2, 1) + interval '1 month'
    AND account_id = $3
`

type GetNetIncomeForMonthParams struct {
	Year      int32
	Month     int32
	AccountID uuid.UUID
}

func (q *Queries) GetNetIncomeForMonth(ctx context.Context, arg GetNetIncomeForMonthParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getNetIncomeForMonth, arg.Year, arg.Month, arg.AccountID)
	var net_income string
	err := row.Scan(&net_income)
	return net_income, err
}
