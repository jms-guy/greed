// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: plaid_webhook_records.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPlaidWebhookRecord = `-- name: CreatePlaidWebhookRecord :one
INSERT INTO plaid_webhook_records(id, webhook_type, webhook_code, item_id, user_id, created_at, processed, processed_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    NOW(),
    FALSE,
    NULL
)
RETURNING id, webhook_type, webhook_code, item_id, user_id, created_at, processed, processed_at
`

type CreatePlaidWebhookRecordParams struct {
	ID          uuid.UUID
	WebhookType string
	WebhookCode string
	ItemID      string
	UserID      uuid.UUID
}

func (q *Queries) CreatePlaidWebhookRecord(ctx context.Context, arg CreatePlaidWebhookRecordParams) (PlaidWebhookRecord, error) {
	row := q.db.QueryRowContext(ctx, createPlaidWebhookRecord,
		arg.ID,
		arg.WebhookType,
		arg.WebhookCode,
		arg.ItemID,
		arg.UserID,
	)
	var i PlaidWebhookRecord
	err := row.Scan(
		&i.ID,
		&i.WebhookType,
		&i.WebhookCode,
		&i.ItemID,
		&i.UserID,
		&i.CreatedAt,
		&i.Processed,
		&i.ProcessedAt,
	)
	return i, err
}

const getWebhookRecords = `-- name: GetWebhookRecords :many
SELECT plaid_webhook_records.id, plaid_webhook_records.webhook_type, plaid_webhook_records.webhook_code, plaid_webhook_records.item_id, plaid_webhook_records.user_id, plaid_webhook_records.created_at, plaid_webhook_records.processed, plaid_webhook_records.processed_at FROM plaid_webhook_records
WHERE plaid_webhook_records.user_id = $1 AND plaid_webhook_records.processed = FALSE
`

func (q *Queries) GetWebhookRecords(ctx context.Context, userID uuid.UUID) ([]PlaidWebhookRecord, error) {
	rows, err := q.db.QueryContext(ctx, getWebhookRecords, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlaidWebhookRecord
	for rows.Next() {
		var i PlaidWebhookRecord
		if err := rows.Scan(
			&i.ID,
			&i.WebhookType,
			&i.WebhookCode,
			&i.ItemID,
			&i.UserID,
			&i.CreatedAt,
			&i.Processed,
			&i.ProcessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const processWebhookRecordsByType = `-- name: ProcessWebhookRecordsByType :exec
UPDATE plaid_webhook_records
SET processed = TRUE, processed_at = NOW()
WHERE item_id = $1
    AND user_id = $2
    AND webhook_type = $3
    AND webhook_code = $4
    AND created_at <= $5 
    AND processed = FALSE
`

type ProcessWebhookRecordsByTypeParams struct {
	ItemID      string
	UserID      uuid.UUID
	WebhookType string
	WebhookCode string
	CreatedAt   time.Time
}

func (q *Queries) ProcessWebhookRecordsByType(ctx context.Context, arg ProcessWebhookRecordsByTypeParams) error {
	_, err := q.db.ExecContext(ctx, processWebhookRecordsByType,
		arg.ItemID,
		arg.UserID,
		arg.WebhookType,
		arg.WebhookCode,
		arg.CreatedAt,
	)
	return err
}
