// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: delegations.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDelegation = `-- name: CreateDelegation :one
INSERT INTO delegations (
    id,
    user_id,
    created_at,
    expires_at,
    revoked_at,
    is_revoked,
    last_used)
VALUES (
    $1,
    $2,
    NOW(),
    $3,
    NULL,
    FALSE,
    NOW()
)
RETURNING id, user_id, created_at, expires_at, revoked_at, is_revoked, last_used
`

type CreateDelegationParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateDelegation(ctx context.Context, arg CreateDelegationParams) (Delegation, error) {
	row := q.db.QueryRowContext(ctx, createDelegation, arg.ID, arg.UserID, arg.ExpiresAt)
	var i Delegation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.IsRevoked,
		&i.LastUsed,
	)
	return i, err
}

const getDelegation = `-- name: GetDelegation :one
SELECT id, user_id, created_at, expires_at, revoked_at, is_revoked, last_used FROM delegations
WHERE id = $1
`

func (q *Queries) GetDelegation(ctx context.Context, id uuid.UUID) (Delegation, error) {
	row := q.db.QueryRowContext(ctx, getDelegation, id)
	var i Delegation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.IsRevoked,
		&i.LastUsed,
	)
	return i, err
}

const revokeDelegationByID = `-- name: RevokeDelegationByID :exec
UPDATE delegations
SET revoked_at = NOW(), is_revoked = TRUE
WHERE id = $1
`

func (q *Queries) RevokeDelegationByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeDelegationByID, id)
	return err
}

const revokeDelegationByUser = `-- name: RevokeDelegationByUser :exec
UPDATE delegations
SET revoked_at = NOW(), is_revoked = TRUE
WHERE user_id = $1
`

func (q *Queries) RevokeDelegationByUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeDelegationByUser, userID)
	return err
}

const updateLastUsed = `-- name: UpdateLastUsed :exec
UPDATE delegations
SET last_used = NOW()
WHERE id = $1
`

func (q *Queries) UpdateLastUsed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateLastUsed, id)
	return err
}
