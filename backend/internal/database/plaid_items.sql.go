// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: plaid_items.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createItem = `-- name: CreateItem :one
INSERT INTO plaid_items(id, user_id, access_token, institution_name, nickname, transaction_sync_cursor, created_at, updated_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    NOW(),
    NOW()
)
RETURNING id, user_id, access_token, institution_name, nickname, transaction_sync_cursor, created_at, updated_at
`

type CreateItemParams struct {
	ID                    string
	UserID                uuid.UUID
	AccessToken           string
	InstitutionName       string
	Nickname              sql.NullString
	TransactionSyncCursor sql.NullString
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (PlaidItem, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.ID,
		arg.UserID,
		arg.AccessToken,
		arg.InstitutionName,
		arg.Nickname,
		arg.TransactionSyncCursor,
	)
	var i PlaidItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.InstitutionName,
		&i.Nickname,
		&i.TransactionSyncCursor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM plaid_items
WHERE id = $1 AND user_id = $2
`

type DeleteItemParams struct {
	ID     string
	UserID uuid.UUID
}

func (q *Queries) DeleteItem(ctx context.Context, arg DeleteItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteItem, arg.ID, arg.UserID)
	return err
}

const getAccessToken = `-- name: GetAccessToken :one
SELECT id, user_id, access_token, institution_name, nickname, transaction_sync_cursor, created_at, updated_at FROM plaid_items
WHERE id = $1
`

func (q *Queries) GetAccessToken(ctx context.Context, id string) (PlaidItem, error) {
	row := q.db.QueryRowContext(ctx, getAccessToken, id)
	var i PlaidItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.InstitutionName,
		&i.Nickname,
		&i.TransactionSyncCursor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCursor = `-- name: GetCursor :one
SELECT transaction_sync_cursor FROM plaid_items
WHERE id = $1 AND access_token = $2
`

type GetCursorParams struct {
	ID          string
	AccessToken string
}

func (q *Queries) GetCursor(ctx context.Context, arg GetCursorParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getCursor, arg.ID, arg.AccessToken)
	var transaction_sync_cursor sql.NullString
	err := row.Scan(&transaction_sync_cursor)
	return transaction_sync_cursor, err
}

const getItemByID = `-- name: GetItemByID :one
SELECT id, user_id, access_token, institution_name, nickname, transaction_sync_cursor, created_at, updated_at FROM plaid_items
WHERE id = $1
`

func (q *Queries) GetItemByID(ctx context.Context, id string) (PlaidItem, error) {
	row := q.db.QueryRowContext(ctx, getItemByID, id)
	var i PlaidItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.InstitutionName,
		&i.Nickname,
		&i.TransactionSyncCursor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getItemByName = `-- name: GetItemByName :one
SELECT id, user_id, access_token, institution_name, nickname, transaction_sync_cursor, created_at, updated_at FROM plaid_items
WHERE nickname = $1
`

func (q *Queries) GetItemByName(ctx context.Context, nickname sql.NullString) (PlaidItem, error) {
	row := q.db.QueryRowContext(ctx, getItemByName, nickname)
	var i PlaidItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.InstitutionName,
		&i.Nickname,
		&i.TransactionSyncCursor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getItemsByUser = `-- name: GetItemsByUser :many
SELECT id, user_id, access_token, institution_name, nickname, transaction_sync_cursor, created_at, updated_at FROM plaid_items
WHERE user_id = $1
`

func (q *Queries) GetItemsByUser(ctx context.Context, userID uuid.UUID) ([]PlaidItem, error) {
	rows, err := q.db.QueryContext(ctx, getItemsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlaidItem
	for rows.Next() {
		var i PlaidItem
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AccessToken,
			&i.InstitutionName,
			&i.Nickname,
			&i.TransactionSyncCursor,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestCursorOrNil = `-- name: GetLatestCursorOrNil :one
SELECT transaction_sync_cursor FROM plaid_items
WHERE id = $1
`

func (q *Queries) GetLatestCursorOrNil(ctx context.Context, id string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getLatestCursorOrNil, id)
	var transaction_sync_cursor sql.NullString
	err := row.Scan(&transaction_sync_cursor)
	return transaction_sync_cursor, err
}

const resetItems = `-- name: ResetItems :exec
DELETE FROM plaid_items
`

func (q *Queries) ResetItems(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetItems)
	return err
}

const updateCursor = `-- name: UpdateCursor :exec
UPDATE plaid_items
SET transaction_sync_cursor = $1, updated_at = NOW()
WHERE id = $2
`

type UpdateCursorParams struct {
	TransactionSyncCursor sql.NullString
	ID                    string
}

func (q *Queries) UpdateCursor(ctx context.Context, arg UpdateCursorParams) error {
	_, err := q.db.ExecContext(ctx, updateCursor, arg.TransactionSyncCursor, arg.ID)
	return err
}

const updateNickname = `-- name: UpdateNickname :exec
UPDATE plaid_items
SET nickname = $1, updated_at = NOW()
WHERE id = $2 AND user_id = $3
`

type UpdateNicknameParams struct {
	Nickname sql.NullString
	ID       string
	UserID   uuid.UUID
}

func (q *Queries) UpdateNickname(ctx context.Context, arg UpdateNicknameParams) error {
	_, err := q.db.ExecContext(ctx, updateNickname, arg.Nickname, arg.ID, arg.UserID)
	return err
}
