// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transactions.sql

package database

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions(
    id, 
    account_id, 
    amount, 
    iso_currency_code, 
    date, 
    merchant_name, 
    payment_channel, 
    personal_finance_category
    )
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
RETURNING id, account_id, amount, iso_currency_code, date, merchant_name, payment_channel, personal_finance_category
`

type CreateTransactionParams struct {
	ID                      string
	AccountID               string
	Amount                  float64
	IsoCurrencyCode         sql.NullString
	Date                    sql.NullString
	MerchantName            sql.NullString
	PaymentChannel          string
	PersonalFinanceCategory string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.AccountID,
		arg.Amount,
		arg.IsoCurrencyCode,
		arg.Date,
		arg.MerchantName,
		arg.PaymentChannel,
		arg.PersonalFinanceCategory,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.IsoCurrencyCode,
		&i.Date,
		&i.MerchantName,
		&i.PaymentChannel,
		&i.PersonalFinanceCategory,
	)
	return i, err
}

const deleteTransactions = `-- name: DeleteTransactions :exec
DELETE FROM transactions
WHERE account_id IN (
    SELECT id FROM accounts
    WHERE user_id = ?
)
`

func (q *Queries) DeleteTransactions(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteTransactions, userID)
	return err
}

const getTransactions = `-- name: GetTransactions :many
SELECT id, account_id, amount, iso_currency_code, date, merchant_name, payment_channel, personal_finance_category FROM transactions
WHERE account_id = ?
`

func (q *Queries) GetTransactions(ctx context.Context, accountID string) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactions, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.IsoCurrencyCode,
			&i.Date,
			&i.MerchantName,
			&i.PaymentChannel,
			&i.PersonalFinanceCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
